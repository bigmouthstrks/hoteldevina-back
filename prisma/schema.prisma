generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RoomType {
  roomTypeId     Int      @id @default(autoincrement())
  name           String
  description    String?
  singleBedCount Int      @default(0)
  queenBedCount  Int      @default(0)
  features       String[] @default([])
  price          Int
  promotionPrice Int
  capacity       Int
  images         String[] @default([])
  rooms          Room[]
}

model Room {
  roomId      Int      @id @default(autoincrement())
  number      Int
  isAvailable Boolean  @default(true)
  roomTypeId  Int
  roomType    RoomType @relation(fields: [roomTypeId], references: [roomTypeId])

  // Explicit Many-to-Many Relationship
  reservations ReservationRoom[]
}

model Reservation {
  reservationId       Int               @id @default(autoincrement())
  checkIn             DateTime
  checkOut            DateTime
  checkInWorker       String?
  checkOutWorker      String?
  paymentMethodId     Int?
  paymentMethod       PaymentMethod?    @relation(fields: [paymentMethodId], references: [paymentMethodId])
  userId              Int
  user                User              @relation(fields: [userId], references: [userId])
  reservationStatusId Int               @default(5)
  reservationStatus   ReservationStatus @relation(fields: [reservationStatusId], references: [reservationStatusId])

  // New Fields
  passengerNames String[] @default([])
  passengerCount Int
  nightsCount    Int
  totalPrice     Int

  // Many-to-Many Relationship with Room
  rooms ReservationRoom[]

  // 1:1 Relationship with Voucher (Voucher is optional)
  voucher Voucher?
}

model ReservationRoom {
  roomId        Int
  reservationId Int

  room        Room        @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  reservation Reservation @relation(fields: [reservationId], references: [reservationId], onDelete: Cascade)

  @@id([roomId, reservationId]) // Composite Primary Key
}

model User {
  userId         Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  firstName      String
  lastName       String
  role           String        @default("passenger")
  phoneNumber    String
  documentType   String?
  documentNumber String?
  reservations   Reservation[]
}

model ReservationStatus {
  reservationStatusId Int           @id @default(autoincrement())
  name                String
  description         String?
  reservations        Reservation[]
}

model Voucher {
  voucherId        Int     @id @default(autoincrement())
  documentType     String
  documentNumber   String
  type             String  @default("Boleta")
  companyName      String?
  address          String?
  businessActivity String?

  // 1:1 Relationship with Reservation
  reservationId Int         @unique
  reservation   Reservation @relation(fields: [reservationId], references: [reservationId], onDelete: Cascade)
}

model PaymentMethod {
  paymentMethodId Int           @id @default(autoincrement())
  name            String
  reservations    Reservation[]
}
